services:

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app_network

  # Authentication service (Flask app)
  auth_service:
    build:
      context: ./auth_service
    container_name: auth_service
    ports:
      - "5000:5000"  # Expose Flask app on port 5000
    environment:
      - DATABASE_URL=postgresql://auth_user:password123@auth_db:5432/library_auth_db
    depends_on:
      - auth_db
    networks:
      - app_network

  user_service:
    build:
      context: ./user_service
    container_name: user_service
    ports:
      - "5002:5000"
    environment:
      - DATABASE_URL=postgresql://user_user:password123@user_db:5432/library_user_db
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - user_db
      - kafka1
    networks:
      - app_network

  book_service:
    build:
      context: ./book_service
    container_name: book_service
    ports:
      - "5001:5000"  # Book Service accessible on port 5001
    environment:
      - DATABASE_URL=postgresql://book_user:password123@book_db:5432/library_book_db
      - HOST_NAME=book_service
      - RABBITMQ_HOST=rabbitmq
      - KAFKA_INSTANCE= kafka1
    depends_on:
      - book_db
      - rabbitmq
      - kafka1
    restart: on-failure
    networks:
      - app_network

  book_service_backup:
    build:
      context: ./book_service
    container_name: book_service_backup
    ports:
      - "5003:5000"  # Book Service Ba.ckup accessible on port 5002
    environment:
      - DATABASE_URL=postgresql://book_user:password123@book_db:5432/library_book_db
      - HOST_NAME=book_service_backup
      - RABBITMQ_HOST=rabbitmq
      - KAFKA_INSTANCE= kafka1
    depends_on:
      - book_db
      - rabbitmq
      - kafka1
    restart: on-failure
    networks:
      - app_network


  # NGINX API Gateway
  api_gateway:
    image: nginx:latest
    container_name: api_gateway
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Mount your custom NGINX config
    ports:
      - "80:80"  # Expose the API Gateway on port 80
    depends_on:
      - auth_service
      - book_service
      - book_service_backup
      - user_service
    networks:
      - app_network

  # PostgreSQL service
  auth_db:
    image: postgres:13
    container_name: auth_db
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: library_auth_db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Expose PostgreSQL on port 5432
    networks:
      - app_network

  book_db:
    image: postgres:13
    container_name: book_db
    environment:
      POSTGRES_USER: book_user
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: library_book_db
    volumes:
      - book_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"  # Expose PostgreSQL on port 5432
    networks:
      - app_network

  user_db:
    image: postgres:13
    container_name: user_db
    environment:
      POSTGRES_USER: user_user
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: library_user_db
    volumes:
      - user_db_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"  # Expose PostgreSQL on port 5432
    networks:
      - app_network


  kafka1:
    container_name: kafka1
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=WARN"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app_network
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app_network

  lambda_faas:
    build:
      context: ./get-user-borrowings
    container_name: lambda_faas
    ports:
      - "3000:3000"
    environment:
      - AWS_REGION=us-east-1
      - SERVERLESS_ACCESS_KEY=AKPaAvFJ3hHYhcvI3Rzn4gtTI6V3zuhjmA2ote5AGd3H7
    networks:
      - app_network

# Volumes to persist data
volumes:
  auth_db_data:
  book_db_data:
  user_db_data:

# Define a custom network
networks:
  app_network:
    driver: bridge