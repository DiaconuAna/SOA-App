worker_processes 1;

events {
    worker_connections 1024;
}

http {
    upstream auth_service {
        server auth_service:5000;
    }

    upstream book_service {
        server book_service:5000;
        server book_service_backup:5000;
    }

    upstream user_service {
        server user_service:5000;
    }

    server {
        listen 80;  # NGINX will listen for requests on port 80

        server_name localhost;  # Name of the server (can be adjusted based on your requirements)

        # Logging configuration
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Authentification Service Routing
        location /auth {
            # Proxy requests to the auth service
            proxy_pass http://auth_service;  # Redirect requests to the 'auth_service' container

            # Set headers for proper forwarding
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Optional: Handle timeouts (adjust as needed)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Book Service routing
        location /book {
            proxy_pass http://book_service;  # Redirect requests to the 'book_service' container

            # Set headers for proper forwarding
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Optional: Handle timeouts (adjust as needed)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # User Service routing
        location /user {
            proxy_pass http://user_service;  # Redirect requests to the 'user_service' container

            # Set headers for proper forwarding
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Optional: Handle timeouts (adjust as needed)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

location /user/borrowings/ {
    # Proxy requests to the local Serverless Offline instance
    proxy_pass http://host.docker.internal:3000/dev/user/borrowings;  # Forward to the correct path
#     proxy_pass http://host.docker.internal:4500/bla/;  # Forward to the correct path

    # Set headers for proper forwarding
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Amzn-Trace-Id $http_x_amzn_trace_id;

    # Optional: Handle timeouts (adjust as needed)
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    proxy_intercept_errors off;
}

    }
}
